{
    "name": "NexaLang",
    "scopeName": "source.nexa",
    "fileTypes": ["nexa"],
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#types"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#decorators"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.nexa",
                    "match": "//.*$"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.nexa",
                    "match": "\\b(if|else|for|while|try|catch|return|in|range)\\b"
                },
                {
                    "name": "keyword.other.nexa",
                    "match": "\\b(let|fn|actor|state|spawn|send|say)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.nexa",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.nexa",
                            "match": "\\\\."
                        },
                        {
                            "name": "variable.other.nexa",
                            "begin": "\\{",
                            "end": "\\}",
                            "patterns": [
                                {
                                    "include": "$self"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.nexa",
                    "match": "\\b\\d+\\b"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.nexa",
                    "match": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.other.nexa"
                        },
                        "2": {
                            "name": "entity.name.function.nexa"
                        }
                    }
                },
                {
                    "name": "support.function.nexa",
                    "match": "\\b(math)\\.(add|subtract|multiply|divide)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "support.type.nexa",
                    "match": "\\b(Int)\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.nexa",
                    "match": "(=|\\+=)"
                },
                {
                    "name": "keyword.operator.comparison.nexa",
                    "match": ">"
                },
                {
                    "name": "keyword.operator.arithmetic.nexa",
                    "match": "(\\+|-|\\*|/)"
                }
            ]
        },
        "decorators": {
            "patterns": [
                {
                    "name": "meta.decorator.nexa",
                    "match": "@ai\\.optimize"
                }
            ]
        }
    }
} 